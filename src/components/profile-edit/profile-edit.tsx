import useLocalStorageState from 'use-local-storage-state';
import Container from '@mui/material/Container';
import Avatar from '@mui/material/Avatar';
import Button from '@mui/material/Button';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import TextField from '@mui/material/TextField';
import { red } from '@mui/material/colors';
import { useForm } from 'react-hook-form';
import Stack from '@mui/system/Stack';

import { useNavigate } from 'react-router-dom';
import { UserProfile } from '../profile-view';
import { ImageUploader } from './image-uploader';

/**
 * design spec generated by AI: https://v0.dev/r/cNDG5ixHWXH
 * @returns
 */
export function ProfileEdit() {
  // TODO: save user profile to an API instead of local storage
  const [userProfile, setUserProfile] = useLocalStorageState<UserProfile>('user-profile');

  const navigate = useNavigate();

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
    setValue,
  } = useForm<UserProfile>({
    defaultValues: userProfile,
  });

  const watchAvatar = watch('avatar');

  const onSubmit = (formValues: UserProfile) => {
    setUserProfile(formValues);

    navigate('/profile/me');
  };

  return (
    <Container component="form" onSubmit={handleSubmit(onSubmit)}>
      <Stack direction={{ xs: 'column', sm: 'row' }} gap={3} paddingY={4}>
        <Card sx={{ width: '100%' }}>
          <CardContent>
            <Stack direction={{ xs: 'column', sm: 'row' }} alignItems="center" gap={3}>
              <Avatar src={watchAvatar} sx={{ bgcolor: red[500], width: 120, height: 120 }} aria-label="recipe" />
              <ImageUploader onChange={(imageUrl) => setValue('avatar', imageUrl)}>Change Avatar</ImageUploader>
            </Stack>
          </CardContent>
        </Card>
        <Card sx={{ width: '100%' }}>
          <CardContent>
            <Stack sx={{ width: '100%' }} gap={3}>
              <TextField
                sx={{ width: '100%' }}
                {...register('firstName', {
                  required: {
                    value: true,
                    message: 'First Name is required',
                  },
                  maxLength: {
                    value: 20,
                    message: 'Max len is 20',
                  },
                })}
                id="firstName"
                error={!!errors.firstName}
                label="First Name"
                helperText={errors.firstName?.message}
              />

              <TextField
                sx={{ width: '100%' }}
                {...register('lastName', {
                  pattern: {
                    value: /^[A-Za-z]+$/i,
                    message: 'Last name is invalid',
                  },
                })}
                error={!!errors.lastName}
                id="lastName"
                label="Last Name"
                helperText={errors.lastName?.message}
              />

              <TextField
                sx={{ width: '100%' }}
                {...register('username', {
                  required: {
                    value: true,
                    message: 'Username is required',
                  },
                  maxLength: {
                    value: 20,
                    message: 'Max len is 20',
                  },
                })}
                error={!!errors.username}
                id="username"
                label="Username"
                helperText={errors.username?.message}
              />

              <TextField
                sx={{ width: '100%' }}
                {...register('email', {
                  required: {
                    value: true,
                    message: 'Email is required',
                  },
                  pattern: {
                    value: /^\S+@\S+$/i,
                    message: 'Email is invalid',
                  },
                })}
                error={!!errors.email}
                id="email"
                label="Email"
                helperText={errors.email?.message}
              />

              <TextField
                sx={{ width: '100%' }}
                {...register('phone', {
                  required: {
                    value: true,
                    message: 'Phone is required',
                  },
                  maxLength: {
                    value: 12,
                    message: 'Max len is 12',
                  },
                })}
                error={!!errors.phone}
                id="phone"
                label="Phone"
                helperText={errors.phone?.message}
              />

              <TextField
                sx={{ width: '100%' }}
                {...register('bio', {
                  maxLength: {
                    value: 100,
                    message: 'Max len is 100',
                  },
                })}
                multiline
                error={!!errors.bio}
                id="bio"
                label="Bio"
                helperText={errors.bio?.message}
              />

              <Button type="submit" variant="contained">
                Submit
              </Button>
            </Stack>
          </CardContent>
        </Card>
      </Stack>
    </Container>
  );
}
